{"pageProps":{"post":{"attributes":{"title":"Wait A Second","description":"what about all the dot files?"},"html":"<h2>We only have talked about getting the software up</h2>\n<p>What about dotfiles...\nWhat about configuration...\nWHAT ABOUT MY CUSTOMIZATIONS</p>\n<br>\n<br>\n\n<p>For those unfamiliar with the term dotfiles, it simple means a script that is\nran at the start of your program.  A <code>.bashrc</code> / <code>.zshrc</code> / <code>.vimrc</code> are all\nexamples of dotfiles that run before the program startup is complete.  It is\nthe place for you to register your custom functionality or to alter program\nbehavior</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Well we already have everything we need</h2>\n<p>We have everything we need to get started, we have our reliable environmental\nscript to run, we just need one script that sets up our environment!</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>The Env Idea</h2>\n<ul>\n<li>make a script that installs all the environment files.</li>\n<li>make one or more directories to where you like to install files to</li>\n</ul>\n<br>\n<br>\n\n<h3>Lets do this!</h3>\n<ul>\n<li>whiteboard time!</li>\n<li>code time!</li>\n<li>lets start by getting the basics of the script ready<ul>\n<li>dry run</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Expected Code</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n\nscript_dir=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(cd $(dirname <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${BASH_SOURCE[0]}</span>&quot;</span>)</span> &amp;&amp; pwd)&quot;</span>\ndry=<span class=\"hljs-string\">&quot;0&quot;</span>\n\n<span class=\"hljs-keyword\">while</span> [[ <span class=\"hljs-variable\">$#</span> &gt; 0 ]]; <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$1</span>&quot;</span> == <span class=\"hljs-string\">&quot;--dry&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n        dry=<span class=\"hljs-string\">&quot;1&quot;</span>\n    <span class=\"hljs-keyword\">fi</span>\n    <span class=\"hljs-built_in\">shift</span>\n<span class=\"hljs-keyword\">done</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">log</span></span>() {\n    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$dry</span> == <span class=\"hljs-string\">&quot;1&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;[DRY_RUN]: <span class=\"hljs-variable\">$@</span>&quot;</span>\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$@</span>&quot;</span>\n    <span class=\"hljs-keyword\">fi</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">execute</span></span>() {\n    <span class=\"hljs-built_in\">log</span> <span class=\"hljs-string\">&quot;execute: <span class=\"hljs-variable\">$@</span>&quot;</span>\n    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$dry</span> == <span class=\"hljs-string\">&quot;1&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-built_in\">return</span>\n    <span class=\"hljs-keyword\">fi</span>\n\n    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$@</span>&quot;</span>\n}\n\n<span class=\"hljs-built_in\">log</span> <span class=\"hljs-string\">&quot;--------- dev-env ---------&quot;</span>\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Copy time</h2>\n<p>Lets create the copy function that will bring over every source directory to\nthe target directory</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Expected code</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$script_dir</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">copy_dir</span></span>() {\n    <span class=\"hljs-built_in\">pushd</span> <span class=\"hljs-variable\">$1</span>\n    to=<span class=\"hljs-variable\">$2</span>\n    <span class=\"hljs-built_in\">dirs</span>=$(find . -maxdepth 1 -mindepth 1 -<span class=\"hljs-built_in\">type</span> d)\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">dir</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">$dirs</span>; <span class=\"hljs-keyword\">do</span>\n        execute <span class=\"hljs-built_in\">rm</span> -rf <span class=\"hljs-variable\">$to</span>/<span class=\"hljs-variable\">$dir</span>\n        execute <span class=\"hljs-built_in\">cp</span> -r <span class=\"hljs-variable\">$dir</span> <span class=\"hljs-variable\">$to</span>/<span class=\"hljs-variable\">$dir</span>\n    <span class=\"hljs-keyword\">done</span>\n    <span class=\"hljs-built_in\">popd</span>\n}\n\ncopy_dir .config <span class=\"hljs-variable\">$XDG_CONFIG_HOME</span>\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>And just like that</h2>\n<p>We have ourselves a way to copy over directories for all of our programs... but\nwhat about one off scripts?</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Expected Code</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">copy_file</span></span>() {\n    from=<span class=\"hljs-variable\">$1</span>\n    to=<span class=\"hljs-variable\">$2</span>\n    name=$(<span class=\"hljs-built_in\">basename</span> <span class=\"hljs-variable\">$from</span>)\n    execute <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-variable\">$to</span>/<span class=\"hljs-variable\">$name</span> \n    execute <span class=\"hljs-built_in\">cp</span> <span class=\"hljs-variable\">$from</span> <span class=\"hljs-variable\">$to</span>/<span class=\"hljs-variable\">$name</span>\n}\n\ncopy_file .specialrc ~/\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>We make things bigger than they are</h2>\n<p>this will solve about 99% of all dotfile management issues.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n","markdown":"\n## We only have talked about getting the software up\nWhat about dotfiles...\nWhat about configuration...\nWHAT ABOUT MY CUSTOMIZATIONS\n\n<br>\n<br>\n\nFor those unfamiliar with the term dotfiles, it simple means a script that is\nran at the start of your program.  A `.bashrc` / `.zshrc` / `.vimrc` are all\nexamples of dotfiles that run before the program startup is complete.  It is\nthe place for you to register your custom functionality or to alter program\nbehavior\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Well we already have everything we need\nWe have everything we need to get started, we have our reliable environmental\nscript to run, we just need one script that sets up our environment!\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## The Env Idea\n* make a script that installs all the environment files.\n* make one or more directories to where you like to install files to\n\n<br>\n<br>\n\n### Lets do this!\n* whiteboard time!\n* code time!\n* lets start by getting the basics of the script ready\n  * dry run\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Expected Code\n```bash\n#!/usr/bin/env bash\n\nscript_dir=\"$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\"\ndry=\"0\"\n\nwhile [[ $# > 0 ]]; do\n    if [[ \"$1\" == \"--dry\" ]]; then\n        dry=\"1\"\n    fi\n    shift\ndone\n\nlog() {\n    if [[ $dry == \"1\" ]]; then\n        echo \"[DRY_RUN]: $@\"\n    else\n        echo \"$@\"\n    fi\n}\n\nexecute() {\n    log \"execute: $@\"\n    if [[ $dry == \"1\" ]]; then\n        return\n    fi\n\n    \"$@\"\n}\n\nlog \"--------- dev-env ---------\"\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Copy time\nLets create the copy function that will bring over every source directory to\nthe target directory\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Expected code\n```bash\ncd $script_dir\ncopy_dir() {\n    pushd $1\n    to=$2\n    dirs=$(find . -maxdepth 1 -mindepth 1 -type d)\n    for dir in $dirs; do\n        execute rm -rf $to/$dir\n        execute cp -r $dir $to/$dir\n    done\n    popd\n}\n\ncopy_dir .config $XDG_CONFIG_HOME\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## And just like that\nWe have ourselves a way to copy over directories for all of our programs... but\nwhat about one off scripts?\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Expected Code\n```bash\ncopy_file() {\n    from=$1\n    to=$2\n    name=$(basename $from)\n    execute rm $to/$name \n    execute cp $from $to/$name\n}\n\ncopy_file .specialrc ~/\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## We make things bigger than they are\nthis will solve about 99% of all dotfile management issues.\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n","slug":"wait","title":"Wait A Second","section":"Your Env","icon":"info-circle","filePath":"/home/runner/work/dev-prod-2/dev-prod-2/lessons/02-your-env/E-wait.md","nextSlug":"/dev-prod-2/lessons/navigation/window","prevSlug":"/dev-prod-2/lessons/your-env/neovim"}},"__N_SSG":true}