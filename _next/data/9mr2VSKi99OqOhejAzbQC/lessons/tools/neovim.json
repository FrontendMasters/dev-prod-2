{"pageProps":{"post":{"attributes":{"title":"Tools","description":"your most used tool is the editor"},"html":"<h2>Lets start with your editor</h2>\n<p>Now i am going to show you around neovim, not because you are going to use\nneovim, or that i am trying to convince you to use neovim.  You should use\nneovim because you want to explore other ways of editing. Also, its good\nunderstand just how hackable it is and perhaps you will be willing to try it</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Creating your own neovim experience</h2>\n<p>I&#39;ll just give you a brief look at neovim and what you can do.  This isn&#39;t\nreally a &quot;follow&quot; along section, but if you already have neovim setup, you\ncould.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>One more note about vim</h2>\n<p>If you are getting a bit vim curious, seeing people fly around, its totally\nnormal.  But i do want to warn you about 2 things.</p>\n<ol>\n<li><p>you live in a world where you have really different mentality.  This isn&#39;t\nthe era that vi or vim was created.  So many modern luxuries that its hard\nto connect at first with Vim.  So the best thing you can do at first is to\nlearn vim motions.  Once you are sufficiently amazing at vim motions, then move\non to using vim.  And of course, i recommend neovim</p>\n</li>\n<li><p>When you first use vim, there is no filetree on the left, menu at the top,\njust text on the screen.  This will make it hard to even read code because\nof how unfamiliar and hostile the environment seems.  Don&#39;t worry, that\nfeeling will go away.</p>\n</li>\n</ol>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Lets go over some of the motions</h2>\n<p>Perhaps to give you a taste, lets go over some of the motions and why its\namazing.</p>\n<p>We can also go over some of the awesome remaps that i have dev&#39;d / been given\nover the last few years.</p>\n<ul>\n<li>motions</li>\n<li>qfix</li>\n<li>harpoon</li>\n<li>navigation</li>\n<li>macros</li>\n<li>commands</li>\n<li>help</li>\n<li>your first init script</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>But why neovim?</h2>\n<p>We get the best of both worlds, a modern IDE and vim motions.  Why would I ever\nuse neovim?</p>\n<ul>\n<li>defense for neovim</li>\n<li>the bonus of using neovim that isn&#39;t quite the same with other editors</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Lets play with the neovim api</h2>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Expected Code</h2>\n<pre><code class=\"hljs language-lua\"><span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">read_file_with_system</span><span class=\"hljs-params\">(filename)</span></span>\n  <span class=\"hljs-keyword\">local</span> pipe = vim.system({<span class=\"hljs-string\">&quot;cat&quot;</span>, filename})\n  <span class=\"hljs-keyword\">local</span> content = pipe:wait().<span class=\"hljs-built_in\">stdout</span>\n  <span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">lines</span> = vim.split(content, <span class=\"hljs-string\">&quot;\\n&quot;</span>, { trimempty = <span class=\"hljs-literal\">true</span> })\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">lines</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">local</span> api = vim.api\n<span class=\"hljs-keyword\">local</span> buf = api.nvim_create_buf(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>)\n<span class=\"hljs-keyword\">local</span> win = api.nvim_open_win(buf, <span class=\"hljs-literal\">false</span>, {\n    relative=<span class=\"hljs-string\">&quot;editor&quot;</span>,\n    width=<span class=\"hljs-number\">80</span>,\n    height=<span class=\"hljs-number\">24</span>,\n    row=<span class=\"hljs-number\">0</span>,\n    col=<span class=\"hljs-number\">0</span>,\n})\napi.nvim_buf_set_lines(buf, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-literal\">false</span>, read_file_with_system(<span class=\"hljs-string\">&quot;./package.json&quot;</span>))\n\nvim.defer_fn(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>\n    api.nvim_win_close(win, <span class=\"hljs-literal\">true</span>)\n<span class=\"hljs-keyword\">end</span>, <span class=\"hljs-number\">5000</span>)\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>There is so much more</h2>\n<p>that was just a taste and there is so much more.  I highly recommend playing\naround with the apis and making anything that you want.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>A quick note about AI</h2>\n<p>One really nice thing about neovim is that the api is so well documented and\nthe surface area so well defined that you can often one shot exactly what you\nneed with neovim and chatgpt.</p>\n<p>this isn&#39;t always the case, it still makes up stuff ~5% of the time, but its\nclose.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>VimBeGood</h2>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n","markdown":"\n## Lets start with your editor\nNow i am going to show you around neovim, not because you are going to use\nneovim, or that i am trying to convince you to use neovim.  You should use\nneovim because you want to explore other ways of editing. Also, its good\nunderstand just how hackable it is and perhaps you will be willing to try it\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Creating your own neovim experience\nI'll just give you a brief look at neovim and what you can do.  This isn't\nreally a \"follow\" along section, but if you already have neovim setup, you\ncould.\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## One more note about vim\nIf you are getting a bit vim curious, seeing people fly around, its totally\nnormal.  But i do want to warn you about 2 things.\n\n1. you live in a world where you have really different mentality.  This isn't\n   the era that vi or vim was created.  So many modern luxuries that its hard\n   to connect at first with Vim.  So the best thing you can do at first is to\n   learn vim motions.  Once you are sufficiently amazing at vim motions, then move\n   on to using vim.  And of course, i recommend neovim\n\n2. When you first use vim, there is no filetree on the left, menu at the top,\n   just text on the screen.  This will make it hard to even read code because\n   of how unfamiliar and hostile the environment seems.  Don't worry, that\n   feeling will go away.\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Lets go over some of the motions\nPerhaps to give you a taste, lets go over some of the motions and why its\namazing.\n\nWe can also go over some of the awesome remaps that i have dev'd / been given\nover the last few years.\n\n* motions\n* qfix\n* harpoon\n* navigation\n* macros\n* commands\n* help\n* your first init script\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## But why neovim?\nWe get the best of both worlds, a modern IDE and vim motions.  Why would I ever\nuse neovim?\n\n* defense for neovim\n* the bonus of using neovim that isn't quite the same with other editors\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Lets play with the neovim api\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Expected Code\n```lua\nlocal function read_file_with_system(filename)\n  local pipe = vim.system({\"cat\", filename})\n  local content = pipe:wait().stdout\n  local lines = vim.split(content, \"\\n\", { trimempty = true })\n  return lines\nend\n\nlocal api = vim.api\nlocal buf = api.nvim_create_buf(false, true)\nlocal win = api.nvim_open_win(buf, false, {\n    relative=\"editor\",\n    width=80,\n    height=24,\n    row=0,\n    col=0,\n})\napi.nvim_buf_set_lines(buf, 0, -1, false, read_file_with_system(\"./package.json\"))\n\nvim.defer_fn(function()\n    api.nvim_win_close(win, true)\nend, 5000)\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## There is so much more\nthat was just a taste and there is so much more.  I highly recommend playing\naround with the apis and making anything that you want.\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## A quick note about AI\nOne really nice thing about neovim is that the api is so well documented and\nthe surface area so well defined that you can often one shot exactly what you\nneed with neovim and chatgpt.\n\nthis isn't always the case, it still makes up stuff ~5% of the time, but its\nclose.\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## VimBeGood\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n","slug":"neovim","title":"Tools","section":"Tools","icon":"info-circle","filePath":"/home/runner/work/dev-prod-2/dev-prod-2/lessons/04-tools/D-neovim.md","nextSlug":"/dev-prod-2/lessons/terminal/intro","prevSlug":"/dev-prod-2/lessons/tools/unix"}},"__N_SSG":true}