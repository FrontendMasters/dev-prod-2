{"pageProps":{"post":{"attributes":{"title":"Tmux","description":"tmux is a great way to navigate around the terminal"},"html":"<h2>The Terminal Experience</h2>\n<p>I have a list of things i want in my terminal to make it useful and it all is</p>\n<p>centered around navigation.</p>\n<h3>What I Want</h3>\n<ol>\n<li>sessions that last even when i close my terminal</li>\n<li>multiple running sessions, and these sessions are based on directory</li>\n<li>&quot;tabs&quot; within a session</li>\n<li>navigate to any session by directory name &quot;instantly&quot;</li>\n<li>navigate to any session by directory with fuzzy find</li>\n<li>run scripts or whatever programs i want when navigating to a directory</li>\n</ol>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>I Choose Tmux</h2>\n<p>I personally use tmux + ghostty, though i hear wezterm, another terminal\nemulator, you can emulate pretty much every way I use tmux.  I have not used\nwezterm so i cannot speak much about it. Zellij has similar experience but more\nmodern</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Quick Notes</h2>\n<ul>\n<li>About 3 years ago I did the first version of Dev productivity and some things\nabout my setup has changed, and parts have remained the same.  After 3 years,\nthis is still my most useful script I have ever created.  But i have added\nsome significant improvements to the script</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Installing TMUX</h2>\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>Install Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Arch Linux</td>\n<td><code>pacman -S tmux</code></td>\n</tr>\n<tr>\n<td>Debian or Ubuntu</td>\n<td><code>apt install tmux</code></td>\n</tr>\n<tr>\n<td>Fedora</td>\n<td><code>dnf install tmux</code></td>\n</tr>\n<tr>\n<td>RHEL or CentOS</td>\n<td><code>yum install tmux</code></td>\n</tr>\n<tr>\n<td>macOS (using Homebrew)</td>\n<td><code>brew install tmux</code></td>\n</tr>\n<tr>\n<td>macOS (using MacPorts)</td>\n<td><code>port install tmux</code></td>\n</tr>\n<tr>\n<td>openSUSE</td>\n<td><code>zypper install tmux</code></td>\n</tr>\n</tbody></table>\n<h3>Base Config</h3>\n<p>Here is the basic config that will make life easier.  This will ensure that you\nhave a similar experience to me</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">set</span> -g default-terminal <span class=\"hljs-string\">&quot;tmux-256color&quot;</span>\n<span class=\"hljs-built_in\">set</span> -s escape-time 0\n<span class=\"hljs-built_in\">set</span> -g base-index 1\n\n<span class=\"hljs-comment\"># optional -- i like C-a not C-b (pure preference)</span>\nunbind C-b\nset-option -g prefix C-a\nbind-key C-a send-prefix\n\n<span class=\"hljs-comment\"># vi key movement for copy/pasta mode</span>\nset-window-option -g mode-keys vi\n<span class=\"hljs-built_in\">bind</span> -T copy-mode-vi v send-keys -X begin-selection\n<span class=\"hljs-built_in\">bind</span> -T copy-mode-vi y send-keys -X copy-pipe-and-cancel <span class=\"hljs-string\">&#x27;xclip -in -selection clipboard&#x27;</span>\n\n<span class=\"hljs-comment\"># &lt;WHERE YOUR TMUX CONF GOES&gt; = XDG_CONFIG_HOME/tmux/tmux.conf</span>\n<span class=\"hljs-comment\"># &lt;WHERE YOUR TMUX CONF GOES&gt; = ~/.tmux.conf</span>\n<span class=\"hljs-built_in\">bind</span> r source-file &lt;WHERE YOUR TMUX CONF GOES&gt; \\; display-message <span class=\"hljs-string\">&quot;tmux.conf reloaded&quot;</span>\n</code></pre><h3>Install it via our dev-env!</h3>\n<p>We can even use our fancy new dev-env script to install it!</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Lets navigate tmux</h2>\n<p>Lets go through some basic commands about tmux so you can see how they work\nwith just usage.  I will show you the ones I use and some that I don&#39;t use</p>\n<p>ource /home/theprimeagen/.tmux-sessionizer\nwhat is prefix key</p>\n<h3>just using <prefix>-* commands</h3>\n<ul>\n<li>creating window</li>\n<li>detaching</li>\n<li>attaching</li>\n<li>showing all running sessions</li>\n<li>killing pane / window / session</li>\n<li>creating and navigating splits<ul>\n<li>tmux is controlled by a config</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>A bit of customization</h2>\n<p>I like to navigate my tmux panes like i navigate my vim windows</p>\n<p>lets try this out:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Add to your tmux.conf file</span>\n<span class=\"hljs-built_in\">bind</span> -r h select-pane -L\n<span class=\"hljs-built_in\">bind</span> -r j select-pane -D\n<span class=\"hljs-built_in\">bind</span> -r k select-pane -U\n<span class=\"hljs-built_in\">bind</span> -r l select-pane -R\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Based on my previous 5 points, only two have been met.</h2>\n<blockquote>\n<ol>\n<li>sessions that last even when i close my terminal</li>\n<li>&quot;tabs&quot; within a session</li>\n</ol>\n</blockquote>\n<br>\n<br>\n\n<p>It turns out that <code>tmux</code> is also scriptable!  And its quite fantastic</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>The Session API</h2>\n<p>A <code>target</code> is a tuple of <code>&lt;session_name&gt;[:&lt;widx&gt;|&lt;wname&gt;[.&lt;pane_idx&gt;]]</code></p>\n<pre><code class=\"hljs language-bash\">tmux new-session -s &lt;sname&gt; -n &lt;initial wname&gt; -d[etach]\ntmux list-sessions\ntmux attach-session -t &lt;target&gt;\ntmux has-session -t &lt;target&gt; <span class=\"hljs-comment\"># don&#x27;t forget -t vs -t=</span>\ntmux switch-client -t &lt;target&gt;\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>The Window API</h2>\n<pre><code class=\"hljs language-bash\">tmux new-window -n &lt;name&gt; [-t session:window_index]\ntmux list-windows [-t session]\ntmux select-window -t session:[window_idx | window_name].[pane_idx]\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Other fun apis</h2>\n<pre><code class=\"hljs language-bash\">tmux send-keys -t &lt;target&gt; <span class=\"hljs-string\">&quot;text&quot;</span> [ctrl keys,...]\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Lets start with our first script</h2>\n<p>From my original points, we still have 4 points left to address to create the\n&quot;perfect&quot; navigation system for the terminal</p>\n<h3>What I Want</h3>\n<ol>\n<li><del>sessions that last even when i close my terminal</del></li>\n<li>multiple running sessions, and these sessions are based on directory</li>\n<li><del>&quot;tabs&quot; within a session</del></li>\n<li>navigate to any session by directory name &quot;instantly&quot;</li>\n<li>navigate to any session by directory with fuzzy find</li>\n<li>run scripts or whatever programs i want when navigating to a directory</li>\n</ol>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Lets Address Point 6 First</h2>\n<p>This is one of the easier points to address (a bit weird)</p>\n<pre><code>6. run scripts or whatever programs i want when navigating to a directory\n</code></pre><ul>\n<li>opens and creates the configuration you want for a project\n** gimp **</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n\n<h2>Opener script</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n\n<span class=\"hljs-keyword\">if</span> [[ -x ./.ready-tmux ]]; <span class=\"hljs-keyword\">then</span>\n    ./.ready-tmux\n<span class=\"hljs-keyword\">elif</span> [[ -x ~/.ready-tmux ]]; <span class=\"hljs-keyword\">then</span>\n    ~/.ready-tmux\n<span class=\"hljs-keyword\">fi</span>\nclear\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Thats pretty cool?</h2>\n<p>That was pretty awesome that we can create all the windows / splits we want\nwith a simple script (don&#39;t worry, it&#39;ll get a lot better)</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Progress</h2>\n<p>We have checked off another component of what I consider a great terminal\nexperience</p>\n<br>\n<br>\n\n<p>But we still have a few left</p>\n<blockquote>\n<ol start=\"2\">\n<li>multiple running sessions, and these sessions are based on directory</li>\n<li>navigate to any session by directory name &quot;instantly&quot;</li>\n<li>navigate to any session by directory with fuzzy find</li>\n</ol>\n</blockquote>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Detour time</h2>\n<p>FZF is an incredible tool for fuzzy finding.  Its not just for finding\ndirectories.  You can fuzzy find on anything you pass in and is often used\nwithin text editors.</p>\n<h3>I will add fzf to my scripts</h3>\n<p><code>dev-env/runs/libs</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># ... other libs i install ...</span>\n\ngit <span class=\"hljs-built_in\">clone</span> git@github.com:junegunn/fzf.git <span class=\"hljs-variable\">$HOME</span>/personal/fzf\n<span class=\"hljs-variable\">$HOME</span>/personal/fzf/install\n</code></pre><p><code>dev-env/env/.zsh_profile</code></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\">## All that sweet sweet fzf</span>\n[ -f ~/.fzf.zsh ] &amp;&amp; <span class=\"hljs-built_in\">source</span> ~/.fzf.zsh\n</code></pre><h3>Execute</h3>\n<p>Make sure i only run my libs script\n<code>run --dry libs</code></p>\n<p>Run my lib script\n<code>run libs</code></p>\n<p>Copy all of my files over\n<code>dev-env</code></p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Test run</h2>\n<p>try pressing <code>C-r</code> (Control + r) and it should bring up a beautiful fuzzy find\ncomparatively to your standard <code>C-r</code> from the terminal</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Playing with FZF</h2>\n<p>input</p>\n<pre><code class=\"hljs language-bash\">➜  dev-prod-2 git:(main) ✗ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;1\\n2\\n3&quot;</span> | fzf\n</code></pre><p>output</p>\n<pre><code class=\"hljs language-bash\">  3\n  2\n▌ 1\n  3/3 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n&gt;\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Lets solve the last problems</h2>\n<blockquote>\n<ol start=\"2\">\n<li>multiple running sessions, and these sessions are based on directory</li>\n<li>navigate to any session by directory name &quot;instantly&quot;</li>\n<li>navigate to any session by directory with fuzzy find</li>\n</ol>\n</blockquote>\n<h3>Some notes</h3>\n<ul>\n<li><p>We don&#39;t want to search <em>every</em> directory on the file system, we want to have\nsome sort of subset.</p>\n</li>\n<li><p>We want to navigate based on the results of FZF</p>\n</li>\n</ul>\n<h3>CODE TIME!!</h3>\n<p>Lets start this MF script (MF = Mother FZF):</p>\n<ul>\n<li>get a selected directory from fzf.</li>\n<li>create a clean tmux session name</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Expected Code</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n\nselected=$(find ~/personal -mindepth 1 -maxdepth 1 -<span class=\"hljs-built_in\">type</span> d | fzf)\n<span class=\"hljs-keyword\">if</span> [[ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selected</span>&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">exit</span> 0\n<span class=\"hljs-keyword\">fi</span>\nselected_name=$(<span class=\"hljs-built_in\">basename</span> <span class=\"hljs-variable\">$selected</span> | <span class=\"hljs-built_in\">tr</span> <span class=\"hljs-string\">&quot;.,: &quot;</span> <span class=\"hljs-string\">&quot;____&quot;</span>)\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;selected!! <span class=\"hljs-variable\">$selected</span> -- selected_name <span class=\"hljs-variable\">$selected_name</span>&quot;</span>\n</code></pre><h3>Lets make the script gooooood</h3>\n<ul>\n<li>if there is, navigate to that session</li>\n<li>if there is not, create that session and navigate to it</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Expected Code</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n\nselected=$(find ~/personal -maxdepth 1 -mindepth 1 -<span class=\"hljs-built_in\">type</span> d | fzf)\n<span class=\"hljs-keyword\">if</span> [[ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selected</span>&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">exit</span> 0\n<span class=\"hljs-keyword\">fi</span>\nselected_name=$(<span class=\"hljs-built_in\">basename</span> <span class=\"hljs-variable\">$selected</span> | <span class=\"hljs-built_in\">tr</span> <span class=\"hljs-string\">&quot;.,: &quot;</span> <span class=\"hljs-string\">&quot;____&quot;</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">switch_to</span></span>() {\n    <span class=\"hljs-keyword\">if</span> [[ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$TMUX</span>&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n        tmux attach-session -t <span class=\"hljs-variable\">$selected_name</span>\n    <span class=\"hljs-keyword\">else</span>\n        tmux switch-client -t <span class=\"hljs-variable\">$selected_name</span>\n    <span class=\"hljs-keyword\">fi</span>\n}\n\n<span class=\"hljs-keyword\">if</span> tmux has-session -t=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selected_name</span>&quot;</span>; <span class=\"hljs-keyword\">then</span>\n    switch_to\n<span class=\"hljs-keyword\">else</span>\n    tmux new-session -ds <span class=\"hljs-variable\">$selected_name</span> -c <span class=\"hljs-variable\">$selected</span>\n    switch_to\n<span class=\"hljs-keyword\">fi</span>\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Remember our previous scriptedy-tmux</h2>\n<p>It would be nice if we could combine our two scripts...</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>Next Expected Script</h2>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n\nselected=$(find ~/personal -maxdepth 1 -mindepth 1 -<span class=\"hljs-built_in\">type</span> d | fzf)\n<span class=\"hljs-keyword\">if</span> [[ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selected</span>&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">exit</span> 0\n<span class=\"hljs-keyword\">fi</span>\nselected_name=$(<span class=\"hljs-built_in\">basename</span> <span class=\"hljs-variable\">$selected</span> | <span class=\"hljs-built_in\">tr</span> <span class=\"hljs-string\">&quot;.,: &quot;</span> <span class=\"hljs-string\">&quot;____&quot;</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">switch_to</span></span>() {\n    <span class=\"hljs-keyword\">if</span> [[ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$TMUX</span>&quot;</span> ]]; <span class=\"hljs-keyword\">then</span>\n        tmux attach-session -t <span class=\"hljs-variable\">$selected_name</span>\n    <span class=\"hljs-keyword\">else</span>\n        tmux switch-client -t <span class=\"hljs-variable\">$selected_name</span>\n    <span class=\"hljs-keyword\">fi</span>\n\n    tmux send-keys -t <span class=\"hljs-variable\">$selected_name</span> <span class=\"hljs-string\">&quot;ready-tmux&quot;</span>\n    tmux send-keys -t <span class=\"hljs-variable\">$selected_name</span> <span class=\"hljs-string\">&quot;welcome to fem&quot;</span>\n}\n\n<span class=\"hljs-keyword\">if</span> tmux has-session -t=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$selected_name</span>&quot;</span>; <span class=\"hljs-keyword\">then</span>\n    switch_to\n<span class=\"hljs-keyword\">else</span>\n    tmux new-session -ds <span class=\"hljs-variable\">$selected_name</span> -c <span class=\"hljs-variable\">$selected</span>\n    switch_to\n<span class=\"hljs-keyword\">fi</span>\n</code></pre><br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n<h2>How do i execute this?</h2>\n<ul>\n<li>we copy it to a $PATH location</li>\n<li>we can create a tmux shortcut to execute it</li>\n</ul>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n","markdown":"\n## The Terminal Experience\nI have a list of things i want in my terminal to make it useful and it all is\n\ncentered around navigation.\n\n### What I Want\n1. sessions that last even when i close my terminal\n1. multiple running sessions, and these sessions are based on directory\n1. \"tabs\" within a session\n1. navigate to any session by directory name \"instantly\"\n1. navigate to any session by directory with fuzzy find\n1. run scripts or whatever programs i want when navigating to a directory\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## I Choose Tmux\nI personally use tmux + ghostty, though i hear wezterm, another terminal\nemulator, you can emulate pretty much every way I use tmux.  I have not used\nwezterm so i cannot speak much about it. Zellij has similar experience but more\nmodern\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Quick Notes\n* About 3 years ago I did the first version of Dev productivity and some things\n  about my setup has changed, and parts have remained the same.  After 3 years,\n  this is still my most useful script I have ever created.  But i have added\n  some significant improvements to the script\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Installing TMUX\n| Platform                    | Install Command         |\n|-----------------------------|-------------------------|\n| Arch Linux                  | `pacman -S tmux`        |\n| Debian or Ubuntu            | `apt install tmux`      |\n| Fedora                      | `dnf install tmux`      |\n| RHEL or CentOS              | `yum install tmux`      |\n| macOS (using Homebrew)      | `brew install tmux`     |\n| macOS (using MacPorts)      | `port install tmux`     |\n| openSUSE                    | `zypper install tmux`   |\n\n### Base Config\nHere is the basic config that will make life easier.  This will ensure that you\nhave a similar experience to me\n\n```bash\nset -g default-terminal \"tmux-256color\"\nset -s escape-time 0\nset -g base-index 1\n\n# optional -- i like C-a not C-b (pure preference)\nunbind C-b\nset-option -g prefix C-a\nbind-key C-a send-prefix\n\n# vi key movement for copy/pasta mode\nset-window-option -g mode-keys vi\nbind -T copy-mode-vi v send-keys -X begin-selection\nbind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'\n\n# <WHERE YOUR TMUX CONF GOES> = XDG_CONFIG_HOME/tmux/tmux.conf\n# <WHERE YOUR TMUX CONF GOES> = ~/.tmux.conf\nbind r source-file <WHERE YOUR TMUX CONF GOES> \\; display-message \"tmux.conf reloaded\"\n```\n\n### Install it via our dev-env!\nWe can even use our fancy new dev-env script to install it!\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Lets navigate tmux\nLets go through some basic commands about tmux so you can see how they work\nwith just usage.  I will show you the ones I use and some that I don't use\n\nource /home/theprimeagen/.tmux-sessionizer\nwhat is prefix key\n\n### just using <prefix>-* commands\n* creating window\n* detaching\n* attaching\n* showing all running sessions\n* killing pane / window / session\n* creating and navigating splits\n    * tmux is controlled by a config\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## A bit of customization\nI like to navigate my tmux panes like i navigate my vim windows\n\nlets try this out:\n\n```bash\n# Add to your tmux.conf file\nbind -r h select-pane -L\nbind -r j select-pane -D\nbind -r k select-pane -U\nbind -r l select-pane -R\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Based on my previous 5 points, only two have been met.\n> 1. sessions that last even when i close my terminal\n> 3. \"tabs\" within a session\n\n<br>\n<br>\n\nIt turns out that `tmux` is also scriptable!  And its quite fantastic\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## The Session API\n\nA `target` is a tuple of `<session_name>[:<widx>|<wname>[.<pane_idx>]]`\n\n```bash\ntmux new-session -s <sname> -n <initial wname> -d[etach]\ntmux list-sessions\ntmux attach-session -t <target>\ntmux has-session -t <target> # don't forget -t vs -t=\ntmux switch-client -t <target>\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## The Window API\n\n```bash\ntmux new-window -n <name> [-t session:window_index]\ntmux list-windows [-t session]\ntmux select-window -t session:[window_idx | window_name].[pane_idx]\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Other fun apis\n\n```bash\ntmux send-keys -t <target> \"text\" [ctrl keys,...]\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Lets start with our first script\nFrom my original points, we still have 4 points left to address to create the\n\"perfect\" navigation system for the terminal\n\n### What I Want\n1. ~~sessions that last even when i close my terminal~~\n1. multiple running sessions, and these sessions are based on directory\n1. ~~\"tabs\" within a session~~\n1. navigate to any session by directory name \"instantly\"\n1. navigate to any session by directory with fuzzy find\n1. run scripts or whatever programs i want when navigating to a directory\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Lets Address Point 6 First\nThis is one of the easier points to address (a bit weird)\n\n```\n6. run scripts or whatever programs i want when navigating to a directory\n```\n\n* opens and creates the configuration you want for a project\n** gimp **\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n\n## Opener script\n\n```bash\n#!/usr/bin/env bash\n\nif [[ -x ./.ready-tmux ]]; then\n    ./.ready-tmux\nelif [[ -x ~/.ready-tmux ]]; then\n    ~/.ready-tmux\nfi\nclear\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Thats pretty cool?\nThat was pretty awesome that we can create all the windows / splits we want\nwith a simple script (don't worry, it'll get a lot better)\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Progress\nWe have checked off another component of what I consider a great terminal\nexperience\n\n<br>\n<br>\n\nBut we still have a few left\n\n> 2. multiple running sessions, and these sessions are based on directory\n> 4. navigate to any session by directory name \"instantly\"\n> 5. navigate to any session by directory with fuzzy find\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Detour time\nFZF is an incredible tool for fuzzy finding.  Its not just for finding\ndirectories.  You can fuzzy find on anything you pass in and is often used\nwithin text editors.\n\n### I will add fzf to my scripts\n\n`dev-env/runs/libs`\n```bash\n# ... other libs i install ...\n\ngit clone git@github.com:junegunn/fzf.git $HOME/personal/fzf\n$HOME/personal/fzf/install\n```\n\n`dev-env/env/.zsh_profile`\n```bash\n## All that sweet sweet fzf\n[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh\n```\n\n### Execute\nMake sure i only run my libs script\n`run --dry libs`\n\nRun my lib script\n`run libs`\n\nCopy all of my files over\n`dev-env`\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Test run\ntry pressing `C-r` (Control + r) and it should bring up a beautiful fuzzy find\ncomparatively to your standard `C-r` from the terminal\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Playing with FZF\n\ninput\n```bash\n➜  dev-prod-2 git:(main) ✗ echo \"1\\n2\\n3\" | fzf\n```\n\noutput\n```bash\n  3\n  2\n▌ 1\n  3/3 ────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n>\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Lets solve the last problems\n> 2. multiple running sessions, and these sessions are based on directory\n> 4. navigate to any session by directory name \"instantly\"\n> 5. navigate to any session by directory with fuzzy find\n\n### Some notes\n* We don't want to search _every_ directory on the file system, we want to have\nsome sort of subset.\n\n* We want to navigate based on the results of FZF\n\n### CODE TIME!!\nLets start this MF script (MF = Mother FZF):\n* get a selected directory from fzf.\n* create a clean tmux session name\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Expected Code\n```bash\n#!/usr/bin/env bash\n\nselected=$(find ~/personal -mindepth 1 -maxdepth 1 -type d | fzf)\nif [[ -z \"$selected\" ]]; then\n    exit 0\nfi\nselected_name=$(basename $selected | tr \".,: \" \"____\")\necho \"selected!! $selected -- selected_name $selected_name\"\n```\n\n### Lets make the script gooooood\n* if there is, navigate to that session\n* if there is not, create that session and navigate to it\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Expected Code\n\n```bash\n#!/usr/bin/env bash\n\nselected=$(find ~/personal -maxdepth 1 -mindepth 1 -type d | fzf)\nif [[ -z \"$selected\" ]]; then\n    exit 0\nfi\nselected_name=$(basename $selected | tr \".,: \" \"____\")\n\nswitch_to() {\n    if [[ -z \"$TMUX\" ]]; then\n        tmux attach-session -t $selected_name\n    else\n        tmux switch-client -t $selected_name\n    fi\n}\n\nif tmux has-session -t=\"$selected_name\"; then\n    switch_to\nelse\n    tmux new-session -ds $selected_name -c $selected\n    switch_to\nfi\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Remember our previous scriptedy-tmux\nIt would be nice if we could combine our two scripts...\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## Next Expected Script\n```bash\n#!/usr/bin/env bash\n\nselected=$(find ~/personal -maxdepth 1 -mindepth 1 -type d | fzf)\nif [[ -z \"$selected\" ]]; then\n    exit 0\nfi\nselected_name=$(basename $selected | tr \".,: \" \"____\")\n\nswitch_to() {\n    if [[ -z \"$TMUX\" ]]; then\n        tmux attach-session -t $selected_name\n    else\n        tmux switch-client -t $selected_name\n    fi\n\n    tmux send-keys -t $selected_name \"ready-tmux\"\n    tmux send-keys -t $selected_name \"welcome to fem\"\n}\n\nif tmux has-session -t=\"$selected_name\"; then\n    switch_to\nelse\n    tmux new-session -ds $selected_name -c $selected\n    switch_to\nfi\n```\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n## How do i execute this?\n* we copy it to a $PATH location\n* we can create a tmux shortcut to execute it\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n\n","slug":"tmux","title":"Tmux","section":"Navigation","icon":"info-circle","filePath":"/home/runner/work/dev-prod-2/dev-prod-2/lessons/03-navigation/B-tmux.md","nextSlug":"/dev-prod-2/lessons/tools/intro","prevSlug":"/dev-prod-2/lessons/navigation/window"}},"__N_SSG":true}